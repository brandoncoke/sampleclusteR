gset= obtain.gset("GSE84881")
gset= obtain.gset("GSE84881")
gsm_titles= obtain.gsm.titles(gset)
title_clusters= title.clustering(gsm_titles)
as.integer(lapply(gsm_titles, assign.group, title_clusters))
gset= obtain.gset("GSE84881")
gsm_titles= obtain.gsm.titles(gset)
title_clusters= title.clustering(gsm_titles)
title_clusters
gsm_titles
sample_names= gsm_titles
title_clusters
assoc_list= title_clusters
sampleclusteR::sdrf.cluster("https://ftp.ebi.ac.uk/biostudies/fire/E-MTAB-/935/E-MTAB-11935/Files/E-MTAB-11935.sdrf.txt")
assign.group(title_clusters, gsm_titles)
assign.group(title_clusters, gsm_titles)
assoc_list
sample_name= "HD_n0352"
sample_name %in% assoc_list
sample_name %in% assoc_list[1]
sample_name %in% assoc_list[2]
sample_name %in% unlist(assoc_list[2])
sample_name %in% unlist(assoc_list[1])
sample_name %in% unlist(assoc_list[[1]])
sample_name %in% assoc_list[[1]]
assoc_list
sample_name
group= NA
for(i in 1:length(sample_names)){ #will slow the code down but need to check all lists.
if(assoc_list %in% assoc_list[[i]]){
group= i
}
}
length(assoc_list)
group= NA
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
if(assoc_list %in% assoc_list[[i]]){
group= i
}
}
group= NA
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
if(assoc_list %in% unlist(assoc_list[i])){
group= i
}
}
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print(i)
#if(assoc_list %in% unlist(assoc_list[i])){
#  group= i
#}
}
if(assoc_list %in% unlist(assoc_list)[i]){
group= i
break
}
i
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print(unlist(assoc_list)[i])
#if(assoc_list %in% unlist(assoc_list)[i]){
#  group= i
#  break
#}
}
assoc_list
unlist(assoc_list)
unlist(assoc_list[1])
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print(unlist(assoc_list[1]))
#if(assoc_list %in% unlist(assoc_list)[i]){
#  group= i
#  break
#}
}
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print(unlist(assoc_list[i]))
#if(assoc_list %in% unlist(assoc_list)[i]){
#  group= i
#  break
#}
}
group= NA
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print()
if(assoc_list %in%
unlist(assoc_list[i])
){
group= i
break
}
}
group= NA
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print()
if(assoc_list %in%
unlist(assoc_list[i])
){
group= i
break()
}
}
group= NA
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print()
if(assoc_list %in%
unlist(assoc_list[i])
){
group= i
#break()
}
}
group= NA
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
print()
if(sample_name %in%
unlist(assoc_list[i])
){
group= i
#break()
}
}
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
if(sample_name %in%
unlist(assoc_list[i])
){
group= i
#break()
}
}
group
group= NA
for(i in 1:length(assoc_list)){ #will slow the code down but need to check all lists.
if(sample_name %in%
unlist(assoc_list[i])
){
group= i
break
}
}
group
sampleclusteR::geo.cluster("GSE84881")
remove.packages('sampleclusteR')
sampleclusteR::supervised.analysis(GEO_id= "GSE130402", meta_data_and_combined= T, limma_or_rankprod = "limma")
GEO_id="GSE79695";  path="~/"; platform= "GPL570"; selection= 1; words_only= T #debugging
message(paste("Analysing", GEO_id)) #user aware of dataset analysed
gset= obtain.gset(GEO_id, platform= platform) #getting expression dataset
if(length(gset@phenoData@data[["geo_accession"]]) <= 3 ){ #quick exit if only one or 2 samples present- limma reqs 2 reps in at least 2 groups
stop("Too few samples for limma!")
}
if(is.null(gset) | class(gset) != "ExpressionSet"){
stop("gset NOT VALID")
}
combined_table= get.combined.table(gset,T)
gsm_titles= gset@phenoData@data$title #origianlly due to get.cluster.titles reusing names of variables- avoid at all costs
title_clusters= title.clustering(gsm_titles, words_only)
combined_table$title_groups= as.integer(lapply(gsm_titles, assign.group,
title_clusters))
#Characteristic clustering
gsm_characteristics= obtain.charateristics(gset)
charateristics_clusters= characteristic.clustering(gsm_characteristics)
combined_table$characteristic_groups= as.integer(lapply(gsm_characteristics,
assign.group,
charateristics_clusters))
#Source clustering
gsm_source= obtain.gsm.source(gset)
source_clusters= source.clustering(gsm_source)
combined_table$source_groups= as.integer(lapply(gsm_source,
assign.group,
source_clusters))
#combined groups
comb_groups= apply(combined_table[,4:6], 1, paste, collapse= "")
unique_combs= unique(comb_groups)
comb_groups= as.integer(lapply(comb_groups, function(x){
which(x == unique_combs)
}))
combined_table$combined_groups= comb_groups
comb_titles= as.character(apply(combined_table[,1:3], 1, paste, collapse= " "))
comb_clusters= list(comb_titles[comb_groups == 1])
if(length(unique(comb_groups_uni)) > 1){ #non-ideal. Cluster objects are lists of lists- so need to be appended sequentially. Also cannot just NA then for loop 1:ect as NA will be included in list.
for(i in 2:length(unique(comb_groups_uni))){
comb_clusters= c(list(comb_titles[comb_groups == i]), comb_clusters)
}
}
combined_table[,4:6]
unique_combs= unique(comb_groups)
comb_groups= as.integer(lapply(comb_groups, function(x){
which(x == unique_combs)
}))
comb_groups
if(length(unique(comb_clusters)) > 1){ #non-ideal. Cluster objects are lists of lists- so need to be appended sequentially. Also cannot just NA then for loop 1:ect as NA will be included in list.
for(i in 2:length(unique(comb_groups_uni))){
comb_clusters= c(list(comb_titles[comb_groups == i]), comb_clusters)
}
}
comb_clusters
GEO_id="GSE79695";  path="~/"; platform= "GPL570"; selection= 1; words_only= T #debugging
sampleclusteR::supervised.analysis(GEO_id= "GSE130402", meta_data_and_combined= T, limma_or_rankprod = "limma")
sampleclusteR::supervised.analysis.cluster(GEO_id= "GSE130402", meta_data_and_combined= T, limma_or_rankprod = "limma")
sampleclusteR::supervised.analysis.cluster(GEO_id= "GSE130402", meta_data_and_combined= T, limma_or_rankprod = "limma")
sampleclusteR::supervised.analysis.cluster(GEO_id= "GSE130402")
sampleclusteR::supervised.analysis.cluster(GEO_id= "GSE130402")
sampleclusteR::supervised.analysis.cluster
?sampleclusteR::supervised.analysis.cluster
?supervised.analysis.cluster()
?geo.cluster
?geo.cluster
?
?sdrf.cluster
GEO_id="GSE7699"; platform= "NONE"
message(paste("Analysing", GEO_id)) #user aware of dataset analysed
gset= obtain.gset(GEO_id, platform= platform) #getting expression dataset
if(length(gset@phenoData@data[["geo_accession"]]) < 2 ){ #quick exit if only one or 2 samples present- limma reqs 2 reps in at least 2 groups
stop("Insufficient samples for clustering")
}
if(is.null(gset) | class(gset) != "ExpressionSet"){
stop("gset NOT VALID")
}
combined_table= get.combined.table(gset,T)
gsm_titles= gset@phenoData@data$title #origianlly due to get.cluster.titles reusing names of variables- avoid at all costs
title_clusters= title.clustering(gsm_titles)
#to many clusters- might be due to junk patient ids
if(length(title_clusters) > nrow(combined_table)*.75){
title_clusters= title.clustering(gsm_titles)
}
#instances where titles are all unique- so cannot cluster
if(length(title_clusters) > (nrow(combined_table)-1)){
combined_table$titleTable= "_"
gsm_titles= rep("Sample", nrow(combined_table))
title_clusters= list("Sample")
}
combined_table$title_groups= as.integer(lapply(gsm_titles, assign.group,
title_clusters))
#if the titles
#Characteristic clustering
gsm_characteristics= obtain.charateristics(gset)
charateristics_clusters= characteristic.clustering(gsm_characteristics)
#instances where characteristics are all unique- so cannot cluster
if(length(charateristics_clusters) > (nrow(combined_table)-1)){
combined_table$characteristicsTable= "_"
gsm_characteristics= rep("Sample", nrow(combined_table))
charateristics_clusters= list("Sample")
}
combined_table$characteristic_groups= as.integer(lapply(gsm_characteristics,
assign.group,
charateristics_clusters))
#Source clustering
gsm_source= obtain.gsm.source(gset)
source_clusters= source.clustering(gsm_source)
#instances where titles are all unique- so cannot cluster
if(length(source_clusters) > (nrow(combined_table)-1)){
combined_table$souceInfo= "_"
gsm_source= rep("Sample", nrow(combined_table))
source_clusters= list("Sample")
}
combined_table$source_groups= as.integer(lapply(gsm_source,
assign.group,
source_clusters))
# comb_groups= as.numeric(apply(combined_table[, 4:6], 1, sum)) #so if no new groups identified from an attribute- i.e. sample titles; column values are the same so no new groups identified when sum taken
comb_groups= apply(combined_table[,4:6], 1, paste, collapse= "")
unique_combs= unique(comb_groups)
comb_groups= as.integer(lapply(comb_groups, function(x){
which(x == unique_combs)
}))
combined_table$combined_groups= comb_groups
#remove excess text from combined text
#which out of titles source and characteristics are useful for providing the titles of the clusters
unique_features= which(as.logical(apply(combined_table[,1:3], 2,
function(x){
length(unique(x)) > 1
})))
#detecting control and treated samples
label_score= unlist(apply(combined_table[,1:3], 1, paste0, collapse= " "))
label_score= as.integer(lapply(label_score, get_score_labels))
if(any(label_score == 1) | any(label_score == 2)){
label_score[label_score == 0]= "Control"
label_score[label_score == 1]= "Treated upregulated"
label_score[label_score == 2]= "Treated downregulated"
}else{
label_score= rep("Unknown", length(label_score))
}
combined_table$sample_type= label_score
if(length(unique_features)> 1){
comb_titles= as.character(apply(combined_table[,unique_features], 1, paste, collapse= " "))
}else{
comb_titles= combined_table[,unique_features]
}
if(length(comb_titles) == 0){
stop("No clusters identified- manual cluster")
}
comb_clusters= list(comb_titles[comb_groups == 1])
for(i in unique(comb_groups)[-1]){
comb_clusters= c(comb_clusters, list(comb_titles[comb_groups == i]))
}
if(length(comb_clusters) == 1 |
length(comb_clusters) > nrow(combined_table) ){
message("No clusters were identified- manually assign clusters")
}
return(combined_table)
combined_table
geo.cluster("GSE7699")
sampleclusteR::geo.cluster("GSE84881")
sampleclusteR::sdrf.cluster("https://ftp.ebi.ac.uk/biostudies/fire/E-MTAB-/935/E-MTAB-11935/Files/E-MTAB-11935.sdrf.txt")
sampleclusteR::supervised.analysis(GEO_id= "GSE130402", meta_data_and_combined= T, limma_or_rankprod = "limma", path="~/")
sampleclusteR::geo.cluster("GSE14773")
