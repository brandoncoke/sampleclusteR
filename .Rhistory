"_",
append_col,
ignore.case = T)
append_col
append_col= paste0(toupper(substr(append_col,1,1)), substr(append_col,2,nchar(append_col)))
append_col
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
clustered_frame
View(clustered_frame)
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
while(grepl("^_")){
gsub("^_", "", append_col)
}
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
while(grepl("^_", append_col)){
gsub("^_", "", append_col)
}
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
while(grepl("^_", append_col)){
append_col= gsub("^_", "", append_col)
}
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
return(clustered_frame)
clustered_frame
rm(clustered_frame)
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
while(grepl("^_", append_col)){
append_col= gsub("^_", "", append_col)
}
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
clustered_frame
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
append_col= gsub("$_", "", append_col)
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
clustered_frame
i
append_col= colnames(cluster_frame)[i]
append_col
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
gsub("$_", "", append_col)
gsub("^_", "", append_col)
append_col= gsub("^_", "", append_col)
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
append_col= gsub("^_", "", append_col)
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
gsub("^_", "", append_col)
View(clustered_frame)
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
append_col= gsub("^_", "", append_col)
cluster_frame[,i]= gsub(" ", ":_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
append_col= gsub("^_", "", append_col)
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= ":_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
append_col= gsub("^_|_$", "", append_col)
paste0(append_col, ":_")
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
metadata= read.table(sdrf_loc, sep= "\t", header = T)
metadata[is.na(metadata)]= ""
sample_source= metadata$Source.Name
metadata= metadata[!grepl("id|file|accession|source[.]Name|scan[.]|comment[.]", colnames(metadata),
ignore.case= T)]
#cols_all_unique= apply(metadata, 2, function(x){
#  round(length(x)*broad_cluster_thres) > length(unique(x)) &
#    length(unique(x)) != 1
cols_all_unique= apply(metadata, 2, function(x){
length(unique(x)) != 1
})
cluster_frame= metadata[,cols_all_unique]
nonredundant_col_indices= as.list(apply(cluster_frame, 1, function(x){which(!duplicated(x))}))
nonredundant_col_indices= unique(unlist(nonredundant_col_indices))
cluster_frame= cluster_frame[, nonredundant_col_indices]
#drop columns with sample ids or file ids to make automated clusters more
#readable
cols_to_keep= colnames(cluster_frame)
cluster_frame= metadata[,cols_to_keep]
#append column name to make sense of values
for(i in 1:ncol(cluster_frame)){
append_col= colnames(cluster_frame)[i]
append_col= gsub("characteristics.|factor.value",
"",
append_col,
ignore.case = T)
append_col= gsub("[.]",
"_",
append_col,
ignore.case = T)
#upper case first letter
append_col=
paste0(toupper(substr(append_col,1,1)),
substr(append_col,2,nchar(append_col)))
append_col= gsub("^_|_$", "", append_col)
append_col= paste0(append_col, ":_")
cluster_frame[,i]= gsub(" ", "_", paste0(append_col, cluster_frame[,i],
sep= "_"))
}
row.names(cluster_frame)= 1:nrow(cluster_frame)
clustered_frame= cluster.metadata.frame(cluster_frame,
concise= concise)
clustered_frame$sample= sample_source
clustered_frame
metadata= read.table(sdrf_loc, sep= "\t", header = T)
View(metadata)
View(metadata)
remove.packages("sampleclusteR")
library(sampleclusteR)
ArrayExpress.cluster
library(sampleclusteR)
ArrayExpress.cluster( "https://ftp.ebi.ac.uk/biostudies/fire/E-MTAB-/935/E-MTAB-11935/Files/E-MTAB-11935.sdrf.txt"
ArrayExpress.cluster( "https://ftp.ebi.ac.uk/biostudies/fire/E-MTAB-/935/E-MTAB-11935/Files/E-MTAB-11935.sdrf.txt")
ArrayExpress.cluster("https://ftp.ebi.ac.uk/biostudies/fire/E-GEOD-/301/E-GEOD-33301/Files/E-GEOD-33301.sdrf.txt")
a= read.csv("~/csv/ArrayExpress_benchmark_frame.csv")
a= a[a$study_id != "",]
unique(a$study_id)
length(unique(a$study_id))
length(unique(substr(a$study_id),1,4))
length(unique(substr(a$study_id,1,4)))
a$automated_group == a$manual_curation
sum(a$automated_group == a$manual_curation)
sum(a$automated_group == a$manual_curation)/nrow(a)
